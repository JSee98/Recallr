// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -source=manager.go -destination=../mocks/mock_prompt_manager.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPromptManagerInterface is a mock of PromptManagerInterface interface.
type MockPromptManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPromptManagerInterfaceMockRecorder
	isgomock struct{}
}

// MockPromptManagerInterfaceMockRecorder is the mock recorder for MockPromptManagerInterface.
type MockPromptManagerInterfaceMockRecorder struct {
	mock *MockPromptManagerInterface
}

// NewMockPromptManagerInterface creates a new mock instance.
func NewMockPromptManagerInterface(ctrl *gomock.Controller) *MockPromptManagerInterface {
	mock := &MockPromptManagerInterface{ctrl: ctrl}
	mock.recorder = &MockPromptManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromptManagerInterface) EXPECT() *MockPromptManagerInterfaceMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockPromptManagerInterface) Reload() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockPromptManagerInterfaceMockRecorder) Reload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockPromptManagerInterface)(nil).Reload))
}
