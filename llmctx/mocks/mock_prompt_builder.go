// Code generated by MockGen. DO NOT EDIT.
// Source: builder.go
//
// Generated by this command:
//
//	mockgen -source=builder.go -destination=../mocks/mock_prompt_builder.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/JSee98/Recallr/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBuilder is a mock of Builder interface.
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
	isgomock struct{}
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder.
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance.
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// BuildPrompt mocks base method.
func (m *MockBuilder) BuildPrompt(ctx context.Context, sessionID, userID, currentInput string, messageLimit int) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildPrompt", ctx, sessionID, userID, currentInput, messageLimit)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildPrompt indicates an expected call of BuildPrompt.
func (mr *MockBuilderMockRecorder) BuildPrompt(ctx, sessionID, userID, currentInput, messageLimit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPrompt", reflect.TypeOf((*MockBuilder)(nil).BuildPrompt), ctx, sessionID, userID, currentInput, messageLimit)
}
