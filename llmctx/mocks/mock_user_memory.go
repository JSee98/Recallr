// Code generated by MockGen. DO NOT EDIT.
// Source: user_memory.go
//
// Generated by this command:
//
//	mockgen -source=user_memory.go -destination=../mocks/mock_user_memory.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserMemory is a mock of UserMemory interface.
type MockUserMemory struct {
	ctrl     *gomock.Controller
	recorder *MockUserMemoryMockRecorder
	isgomock struct{}
}

// MockUserMemoryMockRecorder is the mock recorder for MockUserMemory.
type MockUserMemoryMockRecorder struct {
	mock *MockUserMemory
}

// NewMockUserMemory creates a new mock instance.
func NewMockUserMemory(ctrl *gomock.Controller) *MockUserMemory {
	mock := &MockUserMemory{ctrl: ctrl}
	mock.recorder = &MockUserMemoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserMemory) EXPECT() *MockUserMemoryMockRecorder {
	return m.recorder
}

// DeleteFact mocks base method.
func (m *MockUserMemory) DeleteFact(userID, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFact", userID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFact indicates an expected call of DeleteFact.
func (mr *MockUserMemoryMockRecorder) DeleteFact(userID, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFact", reflect.TypeOf((*MockUserMemory)(nil).DeleteFact), userID, key)
}

// GetFact mocks base method.
func (m *MockUserMemory) GetFact(userID, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFact", userID, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFact indicates an expected call of GetFact.
func (mr *MockUserMemoryMockRecorder) GetFact(userID, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFact", reflect.TypeOf((*MockUserMemory)(nil).GetFact), userID, key)
}

// ListFacts mocks base method.
func (m *MockUserMemory) ListFacts(userID string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFacts", userID)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFacts indicates an expected call of ListFacts.
func (mr *MockUserMemoryMockRecorder) ListFacts(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFacts", reflect.TypeOf((*MockUserMemory)(nil).ListFacts), userID)
}

// SetFact mocks base method.
func (m *MockUserMemory) SetFact(userID, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFact", userID, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFact indicates an expected call of SetFact.
func (mr *MockUserMemoryMockRecorder) SetFact(userID, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFact", reflect.TypeOf((*MockUserMemory)(nil).SetFact), userID, key, value)
}
